package uk.ac.bangor.meander.detectors;

import lombok.extern.java.Log;
import org.apache.commons.math3.distribution.ChiSquaredDistribution;
import uk.ac.bangor.meander.detectors.windowing.WindowPair;
import uk.ac.bangor.meander.streams.StreamContext;

/**
 * @author Will Faithfull
 */
@Log
public class SPLL extends AbstractKMeansQuantizingDetector implements ReductionFunction, DecisionFunction {

    ChiSquaredDistribution cdf;
    private double statistic;

    public SPLL(WindowPair<double[]> windowPair, int K) {
        super(windowPair, K);
    }

    @Override
    public synchronized void update(Double[] input) {
        statistic = reduce(input);
    }

    @Override
    public synchronized double reduce(Double[] example) {
        super.update(example);

        double[] distances = getMinClusterToObservationDistances();
        if(distances == null)
            return 0;

        double likelihoodTerm = 0;
        for(int i=0;i<distances.length;i++) {
            likelihoodTerm += distances[i];
        }
        return likelihoodTerm / distances.length;
    }

    @Override
    public synchronized boolean decide(Double statistic) {
        if(cdf == null) {
            int df = getNFeatures();

            // If the data in W2 was generated by process P1, then the average of the squared mahalanobis distances
            // between the W2 observations and the cluster means should be distributed according to a chi-squared
            // distribution with n degrees of freedom, where n is the dimensionality of the feature space.
            cdf = new ChiSquaredDistribution(df);
        }

        double cumulativeProbability = cdf.cumulativeProbability(statistic);
        if((1-cumulativeProbability) < cumulativeProbability)
            cumulativeProbability = 1-cumulativeProbability;

        return cumulativeProbability < 0.05;
    }

    @Override
    public synchronized boolean isChangeDetected() {
        return decide(statistic);
    }

    @Override
    public boolean ready() {
        return true;
    }

    @Override
    public void after(StreamContext context) {

    }
}
